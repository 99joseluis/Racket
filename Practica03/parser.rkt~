#lang plai
(require (file "./grammars.rkt"))

;; Toma una lista de números, symbolos o listas
;; y la traduce a un árbol de sintaxis abstracta WAE
;; A::=<number>
;;    | <symbol>
;;    | listof(A)
;; parse: A -> WAE
;; parse: s-expression -> WAE
(define (parse sexp)
  (cond
    [(empty? sexp) (error "Exp vacía")]
    [(symbol? sexp) (id sexp)]
    [(number? sexp) (num sexp)])
    [(list? sexp)
     (case (car sexp)
       [(+) (if (< (length sexp) 3) (error "Argumento invalido") (op + (for/list ([i (cdr sexp)]) (parse i))))]
       [(-) (if (< (length sexp) 3) (error "Argumento invalido") (op - (for/list ([i (cdr sexp)]) (parse i))))]
       [(*) (if (< (length sexp) 3) (error "Argumento invalido") (op * (for/list ([i (cdr sexp)]) (parse i))))]
       [(/) (if (< (length sexp) 3) (error "Argumento invalido") (op / (for/list ([i (cdr sexp)]) (parse i))))]
       [(modulo) (if (not(= (length sexp) 3)) (error "Argumento invalido") (op modulo (list (parse (second sexp)) (parse (third sexp)))))]
       [(expt) (if (not (= (length sexp) 3)) (error "Argumento invalido") (op expt (list (parse (second sexp)) (parse (third sexp)))))]
       [(add1) (if (not (= (length sexp) 2)) (error "Argumento invalido") (op add1 (list (parse (second sexp)))))]
       [(sub1) (if (not (= (length sexp) 2)) (error "Argumento invalido")(op sub1 (list (parse (second sexp)))))]
       [(with) (with (for/list ([i (second sexp)]) (binding (first i) (parse (second i))) (parse (third sexp))))] ;Falta verificar que las expresiones recibidas son válidas
       [(with*) (with* (for/list ([i (second sexp)]) (binding (first i) (parse (second i)))) (parse (third sexp)))] ;Falta verificar que las expresiones recibidas son válidas
       )]
  )